{-
  TASK 5 - Fibonacci sequence
  Implement a function that generates the Fibonacci
  sequence from N to N+K terms (0<=N<=370; 0<=N+K<=371; 0<=K<=255).
  The first two terms of the Fibonacci sequence are F_0 = 0 and F_1 = 1,
  and the rest are defined as F_n = F_(n-1) + F_(n-2).
  The resulting Fibonacci sequence should be stored in a tuple.
  For example, a request with N = 1 and K = 3 should return a tuple [1, 1, 2],
  and a request with N = 201 and K = 4 should return a tuple
  [453973694165307953197296969697410619233826,
  734544867157818093234908902110449296423351,
  1188518561323126046432205871807859915657177,
  1923063428480944139667114773918309212080528]
-}

() recv_internal() {
}

forall X -> (tuple) to_tuple (X x) asm "NOP";

;; testable
(tuple) fibonacci_sequence (int n, int k) method_id {
  if (n > 370) {
    return empty_tuple();
  }
  if (n < 0) {
    return empty_tuple();
  }
  if (n + k > 371) {
    return empty_tuple();
  }
  if (n + k < 0) {
    return empty_tuple();
  }
  if (k > 255) {
    return empty_tuple();
  }
  if (k < 0) {
    return empty_tuple();
  }

  tuple sequence = to_tuple([0, 1]);
  int sum = n + k;
  int i = 2;
  while (i < sum) {
    int nextTerm = sequence.at(i - 1) + sequence.at(i - 2);
    sequence~tpush(nextTerm);
    i += 1;
  }

  tuple result = empty_tuple();
  while (n < sum) {
    result~tpush(sequence.at(n));
    n += 1;
  }
  return result;
}