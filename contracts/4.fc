{-
  TASK 4 - Caesar Cipher
  Implement a Caesar cipher encryption and decryption functions.
  The input is a string (https://docs.ton.org/develop/smart-contracts/guidelines/internal-messages#simple-message-with-comment)
  where the text is encrypted in a cell (after 32bit 00000000 prefix flag), the algorithm rotates the characters and the last ASCII
  character should go to the beginning. Return new text encoded in cell.
-}

() recv_internal() {
}

forall X -> int is_null (X x) asm "ISNULL";
(int) tlen (tuple t) asm "TLEN";

;; testable
(cell) caesar_cipher_encrypt(int shift, cell text) method_id {
  slice raw = text.begin_parse();
  raw~skip_bits(32);
  if (shift < 0) {
    shift = 26 - (- shift % 26);
  }
  tuple result = empty_tuple();

  tuple result = encode(result, begin_cell(), raw, shift);

  cell root = null();
  int i = result.tlen() - 1;
  while (i != -1) {
    if (cell_null?(root)) {
      root = result.at(i).end_cell();
    } else {
      root = result.at(i)
              .store_ref(root)
              .end_cell();
    }
    i -= 1;
  }
  return root;
}

(tuple) encode(tuple result, builder root, slice node, int shift) method_id {
  while (node.slice_bits()) {
    int char = node~load_uint(8);
    int newChar = code_caesar(char, shift);
    root~store_uint(newChar, 8);
  }
  result~tpush(root);
  ifnot (node.slice_refs_empty?()) {
    return encode(result, begin_cell(), node~load_ref().begin_parse(), shift);
  }
  return result;
}

;; testable
(cell) caesar_cipher_decrypt(int shift, cell text) method_id {
  return caesar_cipher_encrypt(- shift, text);
}

(int) code_caesar(int char, int shift) method_id {
  int isUpper = ((char >= 65) & (char <= 90));
  if isUpper | ((char >= 97) & (char <= 122)) {
    int ascii_offset = 0;
    if isUpper {
      ascii_offset = 65;
    } else {
      ascii_offset = 97;
    }
    return (char - ascii_offset + shift) % 26 + ascii_offset;
  } else {
    return char;
  }
}
