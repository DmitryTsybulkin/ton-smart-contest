{-
  TASK 4 - Caesar Cipher
  Implement a Caesar cipher encryption and decryption functions.
  The input is a string (https://docs.ton.org/develop/smart-contracts/guidelines/internal-messages#simple-message-with-comment)
  where the text is encrypted in a cell (after 32bit 00000000 prefix flag), the algorithm rotates the characters and the last ASCII
  character should go to the beginning. Return new text encoded in cell.
-}

() recv_internal() {
}

;; testable
(cell) caesar_cipher_encrypt(int shift, cell text) method_id {
  slice raw = text.begin_parse();
  raw~load_uint(32);
  if (shift < 0) {
    shift = 26 - (- shift % 26);
  }
  return encode(begin_cell(), raw, shift);
}

;; testable
(cell) caesar_cipher_decrypt(int shift, cell text) method_id {
  return caesar_cipher_encrypt(- shift, text);
}

(cell) encode(builder result, slice node, int shift) method_id {
  int i = 0;
  while (node.slice_bits()) {
    int char = node~load_uint(8);
    int newChar = code_caesar(char, shift);
    result~store_uint(newChar, 8); ;; can throw error when get overflow
    i += 8;
  }

  ifnot (node.slice_refs_empty?()) {
;;     result.store_ref() just return builder here and use root as param (?)
    return encode(result, node~load_ref().begin_parse(), shift);
  }
  return result.end_cell();
}

(int) code_caesar(int char, int shift) method_id {
  int isUpper = ((char >= 65) & (char <= 90));
  if isUpper | ((char >= 97) & (char <= 122)) {
    int ascii_offset = 0;
    if isUpper {
      ascii_offset = 65;
    } else {
      ascii_offset = 97;
    }
    return (char - ascii_offset + shift) % 26 + ascii_offset;
  } else {
    return char;
  }
}

